package {{packageName}};

@SuppressWarnings("all")
public class {{className}} extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{{schemaText}}");
  {{#fields}}
  {{doc}}private {{type}} {{name}}Field;
  {{/fields}}
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  public java.lang.Object get(int field$) {
    switch (field$) {
    {{#fields}}
    case {{num}}: return {{name}}Field;
    {{/fields}}
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    {{#fields}}
    case {{num}}: {{#utf8}}this.{{name}}Cache = null; {{/utf8}}{{name}}Field = ({{type}})value$; break;
    {{/fields}}
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // My extensions for pulling Strings instead of Utf8
  {{#fields}}
  {{#utf8}}
  private String {{name}}Cache;
  public String {{name}}() { return this.{{name}}Cache == null ? (this.{{name}}Field == null ? null : (this.{{name}}Cache = String.valueOf(this.{{name}}Field))) : this.{{name}}Cache; }
  public void {{name}}(String stringValue) { this.{{name}}Cache = stringValue; this.{{name}}Field = stringValue == null ? null : new org.apache.avro.util.Utf8(stringValue); }
  {{/utf8}}
  {{^utf8}}
  public {{type}} {{name}}() { return this.{{name}}Field; }
  public void {{name}}({{type}} value) { this.{{name}}Field = value; }
  {{/utf8}}
  {{/fields}}
}
